name: Test Workflow

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  test:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Install system dependencies
      run: |
        sudo apt update
        sudo apt install -y libcap-dev build-essential

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: 3.9

    - name: Install dependencies
      run: |
        pip install -r requirements.txt

    - name: Run tests
      run: |
        python -m unittest discover -s tests

  deploy:
      needs: test
      runs-on: ubuntu-latest
      if: github.ref == 'refs/heads/main'

      steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Add SSH key
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.SSH_PRIVATE_KEY }}" | tr -d '\r' > ~/.ssh/id_rsa
          chmod 700 ~/.ssh
          chmod 600 ~/.ssh/id_rsa
          eval "$(ssh-agent -s)"
          ssh-add ~/.ssh/id_rsa
          # Add verbose output and error handling for ssh-keyscan
          ssh-keyscan -v -H ${{ secrets.PI_IP }} 2>&1 | tee -a ~/.ssh/known_hosts || echo "Warning: ssh-keyscan had issues but continuing..."
          # Verify the known_hosts file
          ls -la ~/.ssh/known_hosts
    
      - name: Test SSH Connection
        run: |
          # Add verbose SSH connection test
          ssh -v -o StrictHostKeyChecking=no amjpi@${{ secrets.PI_IP }} "echo 'Connection test'" || {
            echo "SSH connection failed. Debugging info:"
            echo "SSH directory contents:"
            ls -la ~/.ssh/
            echo "Known hosts content (sanitized):"
            cat ~/.ssh/known_hosts | sed 's/^/KNOWN_HOSTS: /'
            exit 1
          }
      
      - name: Deploy to Raspberry Pi
        run: |
          # First try to ensure the Pi is reachable
          timeout 5 ping -c 1 ${{ secrets.PI_IP }} || {
            echo "Cannot reach Raspberry Pi - please check:"
            echo "1. Pi is powered on"
            echo "2. IP address is correct"
            echo "3. Port 22 is forwarded on your router"
            exit 1
          }
          # Rest of deployment commands...
      - name: Deploy to Raspberry Pi 2
        run: |
          ssh -o StrictHostKeyChecking=no amjpi@${{ secrets.PI_IP }} "
            set -ex
            cd ~/Zakibot || echo 'Failed to cd to Zakibot'
            git pull origin main || echo 'Failed to pull from git'
            sudo cp ~/Zakibot/zakibot.service /etc/systemd/system/ || echo 'Failed to copy service file'
            sudo systemctl daemon-reload || echo 'Failed to reload systemd'
            sudo systemctl enable zakibot.service || echo 'Failed to enable service'
            sudo systemctl restart zakibot.service || echo 'Failed to restart service'
          "
          